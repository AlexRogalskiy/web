{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/connectors/duo.ts","webpack:///./node_modules/duo_web_sdk/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DuoWebSDK","getQsParam","url","window","location","href","replace","results","RegExp","exec","decodeURIComponent","document","addEventListener","event","frameElement","createElement","setAttribute","setFrameHeight","body","appendChild","hostParam","requestParam","style","height","innerHeight","init","iframe","host","sig_request","submit_callback","form","data","invokeCSharpAction","err","invokeCSCode","elements","sig_response","onresize","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","postAction","postArgument","duoSig","appSig","submitCallback","DUO_MESSAGE_FORMAT","DUO_ERROR_FORMAT","DUO_OPEN_WINDOW_FORMAT","VALID_OPEN_WINDOW_DOMAINS","initializeStatefulVariables","throwError","message","givenUrl","Error","getDataAttribute","element","dataset","getAttribute","toLowerCase","on","context","fallbackEvent","callback","attachEvent","off","removeEventListener","detachEvent","onReady","offReady","parseSigRequest","sig","indexOf","split","length","sigParts","sigRequest","isDuoMessage","Boolean","origin","match","getPromptElement","options","result","iframeContainer","getUserDefinedElement","isIframe","validateIframeContainer","getElementById","tagName","generateIframeSrc","encodeURIComponent","join","onReceivedMessage","substring","parser","protocol","hostname","endsWith","isValidUrlToOpen","open","doPostBack","ready","promptElement","iframeAttributes","src","firstChild","removeChild","response","input","type","parentElement","insertBefore","nextSibling","method","action","submit","post_action","post_argument","asyncReady","_onReady","_parseSigRequest","_isDuoMessage","_doPostBack","apply"],"mappings":"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","file":"connectors/duo.7a3cbd0aa238df7f4d4f.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1056);\n","import * as DuoWebSDK from 'duo_web_sdk';\r\n\r\n// tslint:disable-next-line\r\nrequire('./duo.scss');\r\n\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    const frameElement = document.createElement('iframe');\r\n    frameElement.setAttribute('id', 'duo_iframe');\r\n    setFrameHeight();\r\n    document.body.appendChild(frameElement);\r\n\r\n    const hostParam = getQsParam('host');\r\n    const requestParam = getQsParam('request');\r\n    DuoWebSDK.init({\r\n        iframe: 'duo_iframe',\r\n        host: hostParam,\r\n        sig_request: requestParam,\r\n        submit_callback: (form: any) => {\r\n            invokeCSCode(form.elements.sig_response.value);\r\n        },\r\n    });\r\n\r\n    window.onresize = setFrameHeight;\r\n\r\n    function setFrameHeight() {\r\n        frameElement.style.height = window.innerHeight + 'px';\r\n    }\r\n});\r\n\r\nfunction getQsParam(name: string) {\r\n    const url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    const regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)');\r\n    const results = regex.exec(url);\r\n\r\n    if (!results) {\r\n        return null;\r\n    }\r\n    if (!results[2]) {\r\n        return '';\r\n    }\r\n\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n\r\nfunction invokeCSCode(data: string) {\r\n    try {\r\n        (window as any).invokeCSharpAction(data);\r\n    } catch (err) { }\r\n}\r\n","/**\r\n * Duo Web SDK v2\r\n * Copyright 2019, Duo Security\r\n */\r\n\r\n(function (root, factory) {\r\n    /*eslint-disable */\r\n    if (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define([], factory);\r\n    /*eslint-enable */\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        // Node. Does not work with strict CommonJS, but\r\n        // only CommonJS-like environments that support module.exports,\r\n        // like Node.\r\n        module.exports = factory();\r\n    } else {\r\n        // Browser globals (root is window)\r\n        var Duo = factory();\r\n        // If the Javascript was loaded via a script tag, attempt to autoload\r\n        // the frame.\r\n        Duo._onReady(Duo.init);\r\n\r\n        // Attach Duo to the `window` object\r\n        root.Duo = Duo;\r\n  }\r\n}(this, function() {\r\n    var DUO_MESSAGE_FORMAT = /^(?:AUTH|ENROLL)+\\|[A-Za-z0-9\\+\\/=]+\\|[A-Za-z0-9\\+\\/=]+$/;\r\n    var DUO_ERROR_FORMAT = /^ERR\\|[\\w\\s\\.\\(\\)]+$/;\r\n    var DUO_OPEN_WINDOW_FORMAT = /^DUO_OPEN_WINDOW\\|/;\r\n    var VALID_OPEN_WINDOW_DOMAINS = [\r\n        'duo.com',\r\n        'duosecurity.com',\r\n        'duomobile.s3-us-west-1.amazonaws.com'\r\n    ];\r\n\r\n    var postAction,\r\n        postArgument,\r\n        host,\r\n        sigRequest,\r\n        duoSig,\r\n        appSig,\r\n        iframe,\r\n        submitCallback;\r\n\r\n    // We use this function instead of setting initial values in the var\r\n    // declarations to make sure the initial values and subsequent\r\n    // re-initializations are always the same.\r\n    initializeStatefulVariables();\r\n\r\n    /**\r\n     * Set local variables to whatever they should be before you call init().\r\n     */\r\n    function initializeStatefulVariables() {\r\n        postAction = '';\r\n        postArgument = 'sig_response';\r\n        host = undefined;\r\n        sigRequest = undefined;\r\n        duoSig = undefined;\r\n        appSig = undefined;\r\n        iframe = undefined;\r\n        submitCallback = undefined;\r\n    }\r\n\r\n    function throwError(message, givenUrl) {\r\n        var url = (\r\n            givenUrl ||\r\n            'https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe'\r\n        );\r\n        throw new Error(\r\n            'Duo Web SDK error: ' + message +\r\n            (url ? ('\\n' + 'See ' + url + ' for more information') : '')\r\n        );\r\n    }\r\n\r\n    function hyphenize(str) {\r\n        return str.replace(/([a-z])([A-Z])/, '$1-$2').toLowerCase();\r\n    }\r\n\r\n    // cross-browser data attributes\r\n    function getDataAttribute(element, name) {\r\n        if ('dataset' in element) {\r\n            return element.dataset[name];\r\n        } else {\r\n            return element.getAttribute('data-' + hyphenize(name));\r\n        }\r\n    }\r\n\r\n    // cross-browser event binding/unbinding\r\n    function on(context, event, fallbackEvent, callback) {\r\n        if ('addEventListener' in window) {\r\n            context.addEventListener(event, callback, false);\r\n        } else {\r\n            context.attachEvent(fallbackEvent, callback);\r\n        }\r\n    }\r\n\r\n    function off(context, event, fallbackEvent, callback) {\r\n        if ('removeEventListener' in window) {\r\n            context.removeEventListener(event, callback, false);\r\n        } else {\r\n            context.detachEvent(fallbackEvent, callback);\r\n        }\r\n    }\r\n\r\n    function onReady(callback) {\r\n        on(document, 'DOMContentLoaded', 'onreadystatechange', callback);\r\n    }\r\n\r\n    function offReady(callback) {\r\n        off(document, 'DOMContentLoaded', 'onreadystatechange', callback);\r\n    }\r\n\r\n    function onMessage(callback) {\r\n        on(window, 'message', 'onmessage', callback);\r\n    }\r\n\r\n    function offMessage(callback) {\r\n        off(window, 'message', 'onmessage', callback);\r\n    }\r\n\r\n    /**\r\n     * Parse the sig_request parameter, throwing errors if the token contains\r\n     * a server error or if the token is invalid.\r\n     *\r\n     * @param {String} sig Request token\r\n     */\r\n    function parseSigRequest(sig) {\r\n        if (!sig) {\r\n            // nothing to do\r\n            return;\r\n        }\r\n\r\n        // see if the token contains an error, throwing it if it does\r\n        if (sig.indexOf('ERR|') === 0) {\r\n            throwError(sig.split('|')[1]);\r\n        }\r\n\r\n        // validate the token\r\n        if (sig.indexOf(':') === -1 || sig.split(':').length !== 2) {\r\n            throwError(\r\n                'Duo was given a bad token.  This might indicate a configuration ' +\r\n                'problem with one of Duo\\'s client libraries.'\r\n            );\r\n        }\r\n\r\n        var sigParts = sig.split(':');\r\n\r\n        // hang on to the token, and the parsed duo and app sigs\r\n        sigRequest = sig;\r\n        duoSig = sigParts[0];\r\n        appSig = sigParts[1];\r\n\r\n        return {\r\n            sigRequest: sig,\r\n            duoSig: sigParts[0],\r\n            appSig: sigParts[1]\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Validate that a MessageEvent came from the Duo service, and that it\r\n     * is a properly formatted payload.\r\n     *\r\n     * The Google Chrome sign-in page injects some JS into pages that also\r\n     * make use of postMessage, so we need to do additional validation above\r\n     * and beyond the origin.\r\n     *\r\n     * @param {MessageEvent} event Message received via postMessage\r\n     */\r\n    function isDuoMessage(event) {\r\n        return Boolean(\r\n            event.origin === ('https://' + host) &&\r\n            typeof event.data === 'string' &&\r\n            (\r\n                event.data.match(DUO_MESSAGE_FORMAT) ||\r\n                event.data.match(DUO_ERROR_FORMAT) ||\r\n                event.data.match(DUO_OPEN_WINDOW_FORMAT)\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Validate the request token and prepare for the iframe to become ready.\r\n     *\r\n     * All options below can be passed into an options hash to `Duo.init`, or\r\n     * specified on the iframe using `data-` attributes.\r\n     *\r\n     * Options specified using the options hash will take precedence over\r\n     * `data-` attributes.\r\n     *\r\n     * Example using options hash:\r\n     * ```javascript\r\n     * Duo.init({\r\n     *     iframe: \"some_other_id\",\r\n     *     host: \"api-main.duo.test\",\r\n     *     sig_request: \"...\",\r\n     *     post_action: \"/auth\",\r\n     *     post_argument: \"resp\"\r\n     * });\r\n     * ```\r\n     *\r\n     * Example using `data-` attributes:\r\n     * ```html\r\n     * <iframe id=\"duo_iframe\"\r\n     *         data-host=\"api-main.duo.test\"\r\n     *         data-sig-request=\"...\"\r\n     *         data-post-action=\"/auth\"\r\n     *         data-post-argument=\"resp\"\r\n     *         >\r\n     * </iframe>\r\n     * ```\r\n     *\r\n     * Some browsers (especially embedded browsers) don't like it when the Duo\r\n     * Web SDK changes the `src` attribute on the iframe. To prevent this, there\r\n     * is an alternative way to use the Duo Web SDK:\r\n     *\r\n     * Add a div (or any other container element) instead of an iframe to the\r\n     * DOM with an id of \"duo_iframe\", or pass that element to the\r\n     * `iframeContainer` parameter of `Duo.init`. An iframe will be created and\r\n     * inserted into that container element, preventing `src` change related\r\n     * bugs. WARNING: All other elements in the container will be deleted.\r\n     *\r\n     * The `iframeAttributes` parameter of `Duo.init` is available to set any\r\n     * attributes on the inserted iframe if the Duo Web SDK is inserting the\r\n     * iframe. For details, see the parameter documentation below.\r\n     *\r\n     * @param {Object} options\r\n     * @param {String} options.host - Hostname for the Duo Prompt.\r\n     * @param {String} options.sig_request - Request token.\r\n     * @param {String|HTMLElement} [options.iframe] - The iframe, or id of an\r\n     *     iframe that will be used for the Duo Prompt. If you don't provide\r\n     *     this or the `iframeContainer` parameter the Duo Web SDK will default\r\n     *     to using whatever element has an id of \"duo_iframe\".\r\n     * @param {String|HTMLElement} [options.iframeContainer] - The element you\r\n     *     want the Duo Prompt inserted into, or the id of that element.\r\n     *     Anything inside this element will be deleted and replaced with an\r\n     *     iframe hosting the Duo prompt. If you don't provide this or the\r\n     *     `iframe` parameter the Duo Web SDK will default to using whatever\r\n     *     element has an id of \"duo_iframe\".\r\n     * @param {Object} [options.iframeAttributes] - Object with  names and\r\n     *     values coresponding to attributes you want added to the  Duo Prompt\r\n     *     iframe, like `title`, `width` and `allow`. WARNING: this parameter\r\n     *     only works if you use the `iframeContainer` parameter or add an id\r\n     *     of \"duo_iframe\" to an element that isn't an iframe. If you have\r\n     *     added an iframe to the DOM yourself, you should set those attributes\r\n     *     directly on the iframe.\r\n     * @param {String} [options.post_action=''] - URL to POST back to after a\r\n     *     successful auth.\r\n     * @param {String} [options.post_argument='sig_response'] - Parameter name\r\n     *     to use for response token.\r\n     * @param {Function} [options.submit_callback] - If provided, the Duo Web\r\n     *     SDK will not submit the form. Instead it will execute this callback\r\n     *     function passing in a reference to the \"duo_form\" form object.\r\n     *     `submit_callback`` can be used to prevent the webpage from reloading.\r\n     */\r\n    function init(options) {\r\n        // If init() is called more than once we have to reset all the local\r\n        // variables to ensure init() will work the same way every time. This\r\n        // helps people making single page applications. SPAs may periodically\r\n        // remove the iframe and add a new one that has to be initialized.\r\n        initializeStatefulVariables();\r\n\r\n        if (options) {\r\n            if (options.host) {\r\n                host = options.host;\r\n            }\r\n\r\n            if (options.sig_request) {\r\n                parseSigRequest(options.sig_request);\r\n            }\r\n\r\n            if (options.post_action) {\r\n                postAction = options.post_action;\r\n            }\r\n\r\n            if (options.post_argument) {\r\n                postArgument = options.post_argument;\r\n            }\r\n\r\n            if (typeof options.submit_callback === 'function') {\r\n                submitCallback = options.submit_callback;\r\n            }\r\n        }\r\n\r\n        var promptElement = getPromptElement(options);\r\n        if (promptElement) {\r\n            // If we can get the element that will host the prompt, set it.\r\n            ready(promptElement, options.iframeAttributes || {});\r\n        } else {\r\n            // If the element that will host the prompt isn't available yet, set\r\n            // it up after the DOM finishes loading.\r\n            asyncReady(options);\r\n        }\r\n\r\n        // always clean up after yourself!\r\n        offReady(init);\r\n    }\r\n\r\n    /**\r\n     * Given the options from init(), get the iframe or iframe container that\r\n     * should be used for the Duo Prompt. Returns `null` if nothing was found.\r\n     */\r\n    function getPromptElement(options) {\r\n        var result;\r\n\r\n        if (options.iframe && options.iframeContainer) {\r\n            throwError(\r\n                'Passing both `iframe` and `iframeContainer` arguments at the' +\r\n                ' same time is not allowed.'\r\n            );\r\n        } else if (options.iframe) {\r\n            // If we are getting an iframe, try to get it and raise if the\r\n            // element we find is NOT an iframe.\r\n            result = getUserDefinedElement(options.iframe);\r\n            validateIframe(result);\r\n        } else if (options.iframeContainer) {\r\n            result = getUserDefinedElement(options.iframeContainer);\r\n            validateIframeContainer(result);\r\n        } else {\r\n            result = document.getElementById('duo_iframe');\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * When given an HTMLElement, return it. When given a string, get an element\r\n     * with that id, else return null.\r\n     */\r\n    function getUserDefinedElement(object) {\r\n        if (object.tagName) {\r\n            return object;\r\n        } else if (typeof object == 'string') {\r\n            return document.getElementById(object);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Check if the given thing is an iframe.\r\n     */\r\n    function isIframe(element) {\r\n        return (\r\n            element &&\r\n            element.tagName &&\r\n            element.tagName.toLowerCase() === 'iframe'\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Throw an error if we are given an element that is NOT an iframe.\r\n     */\r\n    function validateIframe(element) {\r\n        if (element && !isIframe(element)) {\r\n            throwError(\r\n                '`iframe` only accepts an iframe element or the id of an' +\r\n                ' iframe. To use a non-iframe element, use the' +\r\n                ' `iframeContainer` argument.'\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Throw an error if we are given an element that IS an iframe instead of an\r\n     * element that we can insert an iframe into.\r\n     */\r\n    function validateIframeContainer(element) {\r\n        if (element && isIframe(element)) {\r\n            throwError(\r\n                '`iframeContainer` only accepts a non-iframe element or the' +\r\n                ' id of a non-iframe. To use a non-iframe element, use the' +\r\n                ' `iframeContainer` argument on Duo.init().'\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate the URL that goes to the Duo Prompt.\r\n     */\r\n    function generateIframeSrc() {\r\n        return [\r\n            'https://', host, '/frame/web/v1/auth?tx=', duoSig,\r\n            '&parent=', encodeURIComponent(document.location.href),\r\n            '&v=2.8'\r\n        ].join('');\r\n    }\r\n\r\n    /**\r\n     * This function is called when a message was received from another domain\r\n     * using the `postMessage` API.  Check that the event came from the Duo\r\n     * service domain, and that the message is a properly formatted payload,\r\n     * then perform the post back to the primary service.\r\n     *\r\n     * @param event Event object (contains origin and data)\r\n     */\r\n    function onReceivedMessage(event) {\r\n        if (isDuoMessage(event)) {\r\n            if (event.data.match(DUO_OPEN_WINDOW_FORMAT)) {\r\n                var url = event.data.substring(\"DUO_OPEN_WINDOW|\".length);\r\n                if (isValidUrlToOpen(url)) {\r\n                    // Open the URL that comes after the DUO_WINDOW_OPEN token.\r\n                    window.open(url, \"_self\");\r\n                }\r\n            }\r\n            else {\r\n                // the event came from duo, do the post back\r\n                doPostBack(event.data);\r\n\r\n                // always clean up after yourself!\r\n                offMessage(onReceivedMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate that this passed in URL is one that we will actually allow to\r\n     * be opened.\r\n     * @param url String URL that the message poster wants to open\r\n     * @returns {boolean} true if we allow this url to be opened in the window\r\n     */\r\n    function isValidUrlToOpen(url) {\r\n        if (!url) {\r\n            return false;\r\n        }\r\n\r\n        var parser = document.createElement('a');\r\n        parser.href = url;\r\n\r\n        if (parser.protocol === \"duotrustedendpoints:\") {\r\n            return true;\r\n        } else if (parser.protocol !== \"https:\") {\r\n            return false;\r\n        }\r\n\r\n        for (var i = 0; i < VALID_OPEN_WINDOW_DOMAINS.length; i++) {\r\n           if (parser.hostname.endsWith(\".\" + VALID_OPEN_WINDOW_DOMAINS[i]) ||\r\n                   parser.hostname === VALID_OPEN_WINDOW_DOMAINS[i]) {\r\n               return true;\r\n           }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Register a callback to call ready() after the DOM has loaded.\r\n     */\r\n    function asyncReady(options) {\r\n        var callback = function() {\r\n            var promptElement = getPromptElement(options);\r\n            if (!promptElement) {\r\n                throwError(\r\n                    'This page does not contain an iframe for Duo to use.' +\r\n                    ' Add an element like' +\r\n                    ' <iframe id=\"duo_iframe\"></iframe> to this page.'\r\n                );\r\n            }\r\n\r\n            ready(promptElement, options.iframeAttributes || {});\r\n\r\n            // Always clean up after yourself.\r\n            offReady(callback)\r\n        };\r\n\r\n        onReady(callback);\r\n    }\r\n\r\n    /**\r\n     * Point the iframe at Duo, then wait for it to postMessage back to us.\r\n     */\r\n    function ready(promptElement, iframeAttributes) {\r\n        if (!host) {\r\n            host = getDataAttribute(promptElement, 'host');\r\n\r\n            if (!host) {\r\n                throwError(\r\n                    'No API hostname is given for Duo to use.  Be sure to pass ' +\r\n                    'a `host` parameter to Duo.init, or through the `data-host` ' +\r\n                    'attribute on the iframe element.'\r\n                );\r\n            }\r\n        }\r\n\r\n        if (!duoSig || !appSig) {\r\n            parseSigRequest(getDataAttribute(promptElement, 'sigRequest'));\r\n\r\n            if (!duoSig || !appSig) {\r\n                throwError(\r\n                    'No valid signed request is given.  Be sure to give the ' +\r\n                    '`sig_request` parameter to Duo.init, or use the ' +\r\n                    '`data-sig-request` attribute on the iframe element.'\r\n                );\r\n            }\r\n        }\r\n\r\n        // if postAction/Argument are defaults, see if they are specified\r\n        // as data attributes on the iframe\r\n        if (postAction === '') {\r\n            postAction = getDataAttribute(promptElement, 'postAction') || postAction;\r\n        }\r\n\r\n        if (postArgument === 'sig_response') {\r\n            postArgument = getDataAttribute(promptElement, 'postArgument') || postArgument;\r\n        }\r\n\r\n        if (isIframe(promptElement)) {\r\n            iframe = promptElement;\r\n            iframe.src = generateIframeSrc();\r\n        } else {\r\n            // If given a container to put an iframe in, clean out any children\r\n            // child elements in case `init()` was called more than once.\r\n            while (promptElement.firstChild) {\r\n                // We call `removeChild()` instead of doing `innerHTML = \"\"`\r\n                // to make sure we unbind any events.\r\n                promptElement.removeChild(promptElement.firstChild)\r\n            }\r\n\r\n            iframe = document.createElement('iframe');\r\n\r\n            // Set the src and all other attributes on the new iframe.\r\n            iframeAttributes['src'] = generateIframeSrc();\r\n            for (var name in iframeAttributes) {\r\n                iframe.setAttribute(name, iframeAttributes[name]);\r\n            }\r\n\r\n            promptElement.appendChild(iframe);\r\n        }\r\n\r\n        // listen for the 'message' event\r\n        onMessage(onReceivedMessage);\r\n    }\r\n\r\n    /**\r\n     * We received a postMessage from Duo.  POST back to the primary service\r\n     * with the response token, and any additional user-supplied parameters\r\n     * given in form#duo_form.\r\n     */\r\n    function doPostBack(response) {\r\n        // create a hidden input to contain the response token\r\n        var input = document.createElement('input');\r\n        input.type = 'hidden';\r\n        input.name = postArgument;\r\n        input.value = response + ':' + appSig;\r\n\r\n        // user may supply their own form with additional inputs\r\n        var form = document.getElementById('duo_form');\r\n\r\n        // if the form doesn't exist, create one\r\n        if (!form) {\r\n            form = document.createElement('form');\r\n\r\n            // insert the new form after the iframe\r\n            iframe.parentElement.insertBefore(form, iframe.nextSibling);\r\n        }\r\n\r\n        // make sure we are actually posting to the right place\r\n        form.method = 'POST';\r\n        form.action = postAction;\r\n\r\n        // add the response token input to the form\r\n        form.appendChild(input);\r\n\r\n        // away we go!\r\n        if (typeof submitCallback === \"function\") {\r\n            submitCallback.call(null, form);\r\n        } else {\r\n            form.submit();\r\n        }\r\n    }\r\n\r\n    return {\r\n        init: init,\r\n        _onReady: onReady,\r\n        _parseSigRequest: parseSigRequest,\r\n        _isDuoMessage: isDuoMessage,\r\n        _doPostBack: doPostBack\r\n    };\r\n}));\r\n"],"sourceRoot":""}